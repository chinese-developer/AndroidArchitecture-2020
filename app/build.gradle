apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

androidExtensions {
    experimental = true
}

boolean openDebug(){
    for(String s : gradle.startParameter.taskNames) {
        if (s.contains("Release") | s.contains("release")) {
            return false
        }
    }
    return true
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        flavorDimensions "default" // if you include productFlavors tags

        resConfigs "zh" // 只需要中文资源
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // x5
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }

        // need dependency room library or gradle will throws error exception
        javaCompileOptions {
            annotationProcessorOptions {
                arguments << ['room.incremental': 'true']
            }
        }

        ndk {
            abiFilters 'armeabi-v7a'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            // 无 flavor 时使用. outputFileName = "${project.name}-${variant.versionName}.apk"
            if (openDebug()) {
                outputFileName = "${variant.flavorName}-${variant.versionName}.apk"
            } else {
                outputFileName = "${variant.flavorName}.apk"
            }
        }
    }

    sourceSets {
        main {
            if (rootProject.isMultiApp) {
                manifest.srcFile 'src/app_fake/AndroidManifest.xml'
            } else {
                java.srcDirs += "src/main/java"
                res.srcDirs += "src/main/res"
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    signingConfigs {
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
            storeFile rootProject.file(releaseKeyFileName)
            storePassword releaseKeyPassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            manifestPlaceholders = [screenOrientation: "unspecified"]
        }

        release {
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [screenOrientation: "portrait"]
//            resValue("string", "app_name", "Architecture2020")
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }
    }

    productFlavors {

        regular_platform {
            versionCode appVersionCode as int
            versionName appVersionName
            resValue("string", "app_name", "Architecture2020")
            resValue("string", "host", appHost)
            resValue("string", "platform_name", appPlatformName)
            resValue("drawable", "app_logo", "@drawable/ic_app_logo")
            resValue("drawable", "splash", "@drawable/bg_splash")
            signingConfig signingConfigs.release

            manifestPlaceholders = [
                    JPUSH_PKGNAME: "me.bo.architecture.dev",
                    JPUSH_APPKEY : "",
                    JPUSH_CHANNEL: "developer-attrs"
            ]
        }

        b_platform {
            applicationIdSuffix ".b"
            versionCode appVersionCodeB as int
            versionName appVersionNameB
            resValue("string", "app_name", "Architecture2020-B平台")
            resValue("string", "host", appHostB)
            resValue("string", "platform_name", appPlatformNameB)
            resValue("drawable", "app_logo", "@drawable/ic_app_logo_b")
            resValue("drawable", "splash", "@drawable/bg_splash_b")
            signingConfig signingConfigs.release

            manifestPlaceholders = [
                    JPUSH_PKGNAME: "me.bo.architecture",
                    JPUSH_APPKEY : "",
                    JPUSH_CHANNEL: "developer-attrs"
            ]
        }
    }
}

dependencies {

    if (!rootProject.isMultiApp) {

        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation project(path: ':module_base')
        implementation project(path: ':module_home')

        /*Dagger Hilt*/
        implementation "com.google.dagger:hilt-android:${versions.dagger}"
        kapt "com.google.dagger:hilt-android-compiler:${versions.dagger}"
        implementation "androidx.hilt:hilt-lifecycle-viewmodel:${versions.dagger_hilt}"
        kapt "androidx.hilt:hilt-compiler:${versions.dagger_hilt}"

        /*ARouter*/
        kapt "com.alibaba:arouter-compiler:${versions.arouterAnnotation}"
        /*MoShi*/
        kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    } else {

        implementation "androidx.appcompat:appcompat:${versions.appcompat}"
        implementation "com.google.android.material:material:${versions.material}"

    }
}

/**
 * 根据不同平台用于动态生成发送 email 的文本信息.
 * 手动执行: app/task/other/autoWritingEmailContent 或者 ./gradlew autoWritingEmailContent (chmod +x ./gradlew ..)
 */
task autoWritingEmailContent {
    doLast {
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def apkNameReplace = variant.flavorName
                def versionNameReplace = variant.versionName
                def platformReplace
                if (apkNameReplace == "regular_platform") {
                    platformReplace = "Regular"
                } else {
                    platformReplace = "Others"
                }
                exec {
                    workingDir '../'
                    commandLine "sh", "./sh/shell_email_content.sh", apkNameReplace, versionNameReplace, platformReplace
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}
