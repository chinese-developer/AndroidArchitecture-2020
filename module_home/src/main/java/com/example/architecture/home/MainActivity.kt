package com.example.architecture.homeimport android.content.res.Configurationimport android.content.res.Resourcesimport android.os.Bundleimport android.view.KeyEventimport android.view.MenuItemimport androidx.fragment.app.Fragmentimport androidx.fragment.app.commitNowimport com.alibaba.android.arouter.facade.annotation.Routeimport com.android.base.utils.android.views.newFragmentimport com.app.base.app.AppBaseActivityimport com.app.base.common.EventCenterimport com.app.base.dagger.OKHTTP_REGULARimport com.app.base.dagger.OKHTTP_WITHOUT_TOKENimport com.app.base.data.app.AppDataSourceimport com.app.base.router.AppRouterimport com.app.base.router.RouterPathimport com.blankj.utilcode.util.AppUtilsimport com.example.architecture.home.ui.home.HomeFragmentimport dagger.hilt.android.AndroidEntryPointimport kotlinx.coroutines.ExperimentalCoroutinesApiimport timber.log.Timberimport javax.inject.Injectimport javax.inject.Named@ExperimentalCoroutinesApi@AndroidEntryPoint@Route(path = RouterPath.Main.PATH)class MainActivity : AppBaseActivity() {    @Inject lateinit var appRouter: AppRouter    @Inject lateinit var appDataSource: AppDataSource    @Inject lateinit var eventCenter: EventCenter    @Inject @Named(OKHTTP_REGULAR) lateinit var api: HomeApiService    @Inject @Named(OKHTTP_WITHOUT_TOKEN) lateinit var apiWithoutTouken: HomeApiService    private val mainFragment by lazy { newFragment<MainFragment>() }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        MainActivityResultCallback(this)        AppUtils.getAppSignature().forEach {            Timber.d(it.toCharsString())        }        setContentView(R.layout.app_base_activity)        supportFragmentManager.commitNow {            replace(R.id.common_container_id, mainFragment, MainFragment::class.java.name)            setPrimaryNavigationFragment(mainFragment)        }    }    override fun onConfigurationChanged(newConfig: Configuration) {        super.onConfigurationChanged(newConfig)        /** 禁止改变字体大小 */        if (newConfig.fontScale != 1f) {            resources        }    }    override fun getResources(): Resources? {        val res = super.getResources()        val config = Configuration()        config.setToDefaults()        res.updateConfiguration(config, res.displayMetrics)        return res    }    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {        if (allowedToExitApp && keyCode == KeyEvent.KEYCODE_BACK) {            /** 不退出程序，进入后台 */            moveTaskToBack(true)            return true        }        return super.onKeyDown(keyCode, event)    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        when (item.itemId) {            android.R.id.home -> {                if (isNavigatingMain()) { /*drawerLayout.openDrawer(GravityCompat.START)*/                } else super.onBackPressed()                return true            }        }        return super.onOptionsItemSelected(item)    }    private fun isNavigatingMain(): Boolean {        val currentFragment: Fragment? =            supportFragmentManager.findFragmentById(R.id.common_container_id)        return currentFragment != null && (currentFragment is MainFragment || currentFragment is HomeFragment)    }    companion object {        var allowedToExitApp = true    }}